{
  "problem": "# Remove Invalid Parentheses
Given a string `s` that contains parentheses and letters, remove the minimum number of invalid parentheses to make the input string valid.\n\nReturn _a list of **unique strings** that are valid with the minimum number of removals_. You may return the answer in **any order**.\n\n**Example 1:**\n\n> **Input:** s = \"()())()\"\n> **Output:** [\"(())()\",\"()()()\"]\n\n**Example 2:**\n\n> **Input:** s = \"(a)())()\"\n> **Output:** [\"(a())()\",\"(a)()()\"]\n\n**Example 3:**\n\n> **Input:** s = \")(\"\n> **Output:** [\"\"]\n\n**Constraints:**\n\n- `1 <= s.length <= 25`\n- `s` consists of lowercase English letters and parentheses `'('` and `')'`.\n- There will be at most `20` parentheses in `s`.",
  "code": "def removeInvalidParentheses(s) -> str:",
  "n": 5,
  "testcase_0_args": "())",
  "testcase_0_sol": ["()"],

  "testcase_1_args": "()())()",
  "testcase_1_sol": ["(())()","()()()"],

  "testcase_2_args": ")))",
  "testcase_2_sol": [""],

  "testcase_3_args": "((())))",
  "testcase_3_sol": ["((())))"],

  "testcase_4_args": "(a)())()",
  "testcase_4_sol": ["(a())()", "(a)()()"]
}
